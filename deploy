#!/bin/bash

set -e

# Fungsi untuk menampilkan bantuan
show_help() {
  cat <<EOF
Usage: $0 [options]

Options:
  --task-all          Jalankan semua task (default).
  --skip-apply        Lewati 'terraform apply'.
  --skip-ansible      Lewati task Ansible.
  --plan-only         Jalankan 'terraform plan' saja.
  --env=<file>        Tentukan file environment (default: development.env).
  --ansi=<file>       Tentukan file environment untuk ansible.
  --destroy           Hancurkan semua infrastruktur.
  --help              Tampilkan bantuan.
EOF
}

log() {
  echo "[$(date +'%Y-%m-%d %H:%M:%S')] $@"
}

# Cek apakah file atau direktori ada
check_exists() {
  local path="$1"
  if [[ ! -e "$path" ]]; then
    echo "Error: $path tidak ditemukan." >&2
    exit 1
  fi
}

# Inisialisasi Terraform
run_terraform() {
  log "Inisialisasi Terraform"
  terraform init
  terraform fmt --recursive
  terraform validate

  local env_file_opt=""
  if [[ -n "$ENV_FILE" ]]; then
    check_exists "environment/$ENV_FILE"
    env_file_opt="-var-file=environment/$ENV_FILE"
  fi

  if [[ "$PLAN_ONLY" == true ]]; then
    log "Menjalankan terraform plan $env_file_opt"
    terraform plan $env_file_opt
  elif [[ "$DESTROY" == true ]]; then
    log "Menjalankan terraform destroy $env_file_opt"
    terraform destroy -auto-approve $env_file_opt
  elif [[ "$SKIP_APPLY" == false ]]; then
    log "Menjalankan terraform apply $env_file_opt"
    terraform apply -auto-approve $env_file_opt
  else
    log "Lewati terraform apply (--skip-apply)"
  fi
}

# Menjalankan Ansible Playbook
run_ansible() {
  log "Menjalankan playbook Ansible"
  local ansible_env_opt=""
  if [[ -n "$ANSI_ENV" ]]; then
    check_exists "playbooks/$ANSI_ENV"
    ansible_env_opt="--extra-vars @$(realpath playbooks/$ANSI_ENV)"
  fi
  ansible-playbook ./playbooks/setup/main.yaml $ansible_env_opt
}

# Setup Virtual Environment Python
setup_python_env() {
  log "Menyiapkan Python Virtual Environment (.venv)"
  check_exists "requirements.txt"

  if [[ ! -d .venv ]]; then
    python3 -m venv .venv
  fi

  source .venv/bin/activate
  pip install -r requirements.txt
}

# Parsing options dari command-line arguments
TASK_ALL=true
SKIP_APPLY=false
SKIP_ANSIBLE=false
PLAN_ONLY=false
ENV_FILE="development.env"
ANSI_ENV=""
DESTROY=false

while [[ "$#" -gt 0 ]]; do
  case $1 in
    --task-all) TASK_ALL=true ;;
    --skip-apply) SKIP_APPLY=true ;;
    --skip-ansible) SKIP_ANSIBLE=true ;;
    --plan-only) PLAN_ONLY=true ;;
    --env=*) ENV_FILE="${1#*=}" ;;
    --ansi=*) ANSI_ENV="${1#*=}" ;;
    --destroy) DESTROY=true ;;
    --help) show_help; exit 0 ;;
    *) echo "Unknown option: $1"; show_help; exit 1 ;;
  esac
  shift
done

# Validasi direktori dan file sebelum melanjutkan
check_exists "./playbooks"
check_exists "./requirements.txt"

# Setup virtual environment
setup_python_env

# Menjalankan Terraform sesuai opsi
if [[ "$TASK_ALL" == true || "$PLAN_ONLY" == true || "$SKIP_APPLY" == false || "$DESTROY" == true ]]; then
  run_terraform
fi

# Menjalankan Ansible jika diperlukan
if [[ "$TASK_ALL" == true && "$SKIP_ANSIBLE" == false && "$DESTROY" == false ]]; then
  run_ansible
fi

log "Deployment selesai."
