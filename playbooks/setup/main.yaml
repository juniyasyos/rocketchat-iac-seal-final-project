---
- name: Setup global configuration for Rocket.Chat
  hosts: all
  become: true
  gather_facts: true

  tasks:
  - name: Fetch private IP addresses
    block:
    - name: Get private IP of testing server
      set_fact:
        ip_server_testing: "{{ hostvars[groups['tag_testing_server'][0]].ansible_default_ipv4.address | default('') }}"

    - name: Get private IP of frontend server (nginx)
      set_fact:
        ip_nginx_server: "{{ hostvars[groups['tag_nginx_server'][0]].ansible_default_ipv4.address | default('') }}"

    - name: Get private IP of monitoring server
      set_fact:
        ip_monitoring_server: "{{ hostvars[groups['tag_monitoring_server'][0]].ansible_default_ipv4.address | default('') }}"

    - name: Get private IP of database server
      set_fact:
        ip_db_server: "{{ hostvars[groups['tag_db_server'][0]].ansible_default_ipv4.address | default('') }}"

  - name: Debug IP addresses
    ansible.builtin.debug:
      msg:
      - "Testing IP: {{ ip_server_testing | default('Not defined') }}"
      - "Frontend (nginx) IP: {{ ip_nginx_server | default('Not defined') }}"
      - "Monitoring IP: {{ ip_monitoring_server | default('Not defined') }}"
      - "Database IP: {{ ip_db_server | default('Not defined') }}"

  - name: Install Telnet on required servers
    apt:
      name: telnet
      state: present
    when: "'tag_nginx_server' in group_names or 'tag_db_server' in group_names"

  - name: Allow SSH connections
    ufw:
      rule: allow
      port: ssh
      proto: tcp

  - name: Enable UFW firewall
    ufw:
      state: enabled

  - name: Open ports on Nginx server (inbound to DB)
    ufw:
      rule: allow
      port: "{{ item }}"
      proto: tcp
    loop:
    - '443'
    - '9100'
    - '9113'
    - '9216'
    when: "'tag_nginx_server' in group_names"

  - name: Open ports on Nginx server (inbound to DB)
    ufw:
      rule: allow
      port: "{{ item }}"
      proto: tcp
    loop:
    - '9090'
    - '9099'
    - '3030'
    - '3000'
    - '9093'
    when: "'tag_monitoring_server' in group_names"

  - name: Open port 27017 on DB server (inbound to Nginx)
    ufw:
      rule: allow
      port: '27017'
      proto: tcp
    when: "'tag_db_server' in group_names"

  - name: Ensure Docker is installed
    block:
    - name: Check Docker installation
      ansible.builtin.command:
        cmd: docker --version
      register: docker_check
      changed_when: false
      failed_when: false

    - name: Install Docker if not installed
      ansible.builtin.include_role:
        name: docker
      when: docker_check.rc != 0

    rescue:
    - name: Fail if Docker installation fails
      ansible.builtin.fail:
        msg: "Docker installation failed. Check Docker role or system configuration."

  - name: Setup Rocket.Chat and MongoDB application
    ansible.builtin.include_tasks: application.yaml
    when: "'tag_db_server' in group_names or 'tag_nginx_server' in group_names"

  - name: Start MongoDB server using Docker Compose
    ansible.builtin.shell: >
      docker compose -f /home/{{ ansible_user }}/rocket-chat/mongodb.yml up -d
    register: docker_compose_up
    changed_when: "'Starting' in docker_compose_up.stdout or 'Creating' in docker_compose_up.stdout"
    when: "'tag_db_server' in group_names"

  - name: Setup Rocket.Chat server using Docker Compose
    ansible.builtin.shell: >
      docker compose -f /home/{{ ansible_user }}/rocket-chat/nginx-rochat.yml up -d
    register: docker_compose_up
    changed_when: "'Starting' in docker_compose_up.stdout or 'Creating' in docker_compose_up.stdout"
    when: "'tag_nginx_server' in group_names"

  - name: Test connections between servers
    block:
    - name: Test telnet connectivity to MongoDB server from Nginx Server
      wait_for:
        host: "{{ ip_db_server }}"
        port: 27017
        timeout: 5
      when: "'tag_nginx_server' in group_names"

    - name: Test telnet connectivity to Nginx server from MongoDB Server
      wait_for:
        host: "{{ ip_nginx_server }}"
        port: 443
        timeout: 5
      when: "'tag_db_server' in group_names"
    when: "'tag_db_server' in group_names or 'tag_nginx_server' in group_names"
